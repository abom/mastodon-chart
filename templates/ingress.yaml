apiVersion: v1
data:
  haproxy.cfg: |
    global
      log 127.0.0.1 local0 debug
      maxconn 200

    defaults
      log global
      mode http
      option httplog
      timeout connect 10000
      timeout client  60000
      timeout server  60000

    listen myapp
      bind *:{{ .Values.web.servicePort }}
      mode http


      acl is_streaming path -i -m beg /api/v1/streaming
      acl is_static    path -i -m beg /system/media_attachments
      acl is_static    path -i -m beg /system/cache

      use-server stream-be if is_streaming
      server stream-be {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.streaming.name }}.mastodon.svc.cluster.local:{{ .Values.streaming.servicePort }} weight 0

      use-server static-be if is_static
      server static-be {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.httpd.name }}.mastodon.svc.cluster.local:{{ .Values.httpd.servicePort }} weight 0

      server web-be {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.web.name }}.mastodon.svc.cluster.local:{{ .Values.web.servicePort }}


      option forwardfor




kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap
  namespace: dmz
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-dmzproxy
  namespace: dmz
  labels:
    app: haproxy
    site: {{ .Release.Name }}-{{ .Chart.Name }}
spec:
  selector:
    matchLabels:
      app: haproxy
      site: {{ .Release.Name }}-{{ .Chart.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: haproxy
        site: {{ .Release.Name }}-{{ .Chart.Name }}
    spec:
      tolerations:
      - key: "CPUPower"
        operator: "Exists"
        effect: "NoExecute"
      imagePullSecrets:
      - name: gitlab-private-registry
      containers:
      - name: dmzproxy
        image: registry.gitlab.com/snowgoons/kubernetes/dmz-proxy:latest
        imagePullPolicy: Always
        volumeMounts:
        - name: haproxy-cfg-file
          mountPath: /usr/local/etc/haproxy
        ports:
        - containerPort: {{ .Values.web.servicePort }}
      volumes:
      - name: haproxy-cfg-file
        configMap:
          name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-dmz
  namespace: dmz
spec:
  selector:
    app: haproxy
    site: {{ .Release.Name }}-{{ .Chart.Name }}
  ports:
  - name: {{ .Release.Name }}-{{ .Chart.Name }}
    protocol: "TCP"
    port: {{ .Values.web.servicePort }}
    targetPort: {{ .Values.web.servicePort }}
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: argo-tunnel
  labels:
    component: ingress
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    site: {{ template "web.fullname" . }}
  name: {{ template "web.fullname" . }}
  namespace: dmz
spec:
  rules:
  - host: {{ .Values.web.ingress.host }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-dmz
          servicePort: {{ .Values.web.servicePort }}
  tls:
    - hosts:
      - {{ .Values.web.ingress.host }}
      secretName: snowgoonsdotro-tunnel-cert
